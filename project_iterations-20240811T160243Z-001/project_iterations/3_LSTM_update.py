{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26697,"status":"ok","timestamp":1723364533337,"user":{"displayName":"Lucas Ortengren","userId":"06951531379507722380"},"user_tz":300},"id":"2ExWle7Iynew","outputId":"baa24031-4243-403a-ed26-b0b5107ba411"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting pmdarima\n","  Downloading pmdarima-2.0.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl.metadata (7.8 kB)\n","Requirement already satisfied: joblib\u003e=0.11 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.4.2)\n","Requirement already satisfied: Cython!=0.29.18,!=0.29.31,\u003e=0.29 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (3.0.11)\n","Requirement already satisfied: numpy\u003e=1.21.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.26.4)\n","Requirement already satisfied: pandas\u003e=0.19 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (2.1.4)\n","Requirement already satisfied: scikit-learn\u003e=0.22 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.3.2)\n","Requirement already satisfied: scipy\u003e=1.3.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.13.1)\n","Requirement already satisfied: statsmodels\u003e=0.13.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (0.14.2)\n","Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (2.0.7)\n","Requirement already satisfied: setuptools!=50.0.0,\u003e=38.6.0 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (71.0.4)\n","Requirement already satisfied: packaging\u003e=17.1 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (24.1)\n","Requirement already satisfied: python-dateutil\u003e=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas\u003e=0.19-\u003epmdarima) (2.8.2)\n","Requirement already satisfied: pytz\u003e=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas\u003e=0.19-\u003epmdarima) (2024.1)\n","Requirement already satisfied: tzdata\u003e=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas\u003e=0.19-\u003epmdarima) (2024.1)\n","Requirement already satisfied: threadpoolctl\u003e=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn\u003e=0.22-\u003epmdarima) (3.5.0)\n","Requirement already satisfied: patsy\u003e=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels\u003e=0.13.2-\u003epmdarima) (0.5.6)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy\u003e=0.5.6-\u003estatsmodels\u003e=0.13.2-\u003epmdarima) (1.16.0)\n","Downloading pmdarima-2.0.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl (2.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m14.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: pmdarima\n","Successfully installed pmdarima-2.0.4\n","Collecting optuna\n","  Downloading optuna-3.6.1-py3-none-any.whl.metadata (17 kB)\n","Collecting alembic\u003e=1.5.0 (from optuna)\n","  Downloading alembic-1.13.2-py3-none-any.whl.metadata (7.4 kB)\n","Collecting colorlog (from optuna)\n","  Downloading colorlog-6.8.2-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna) (1.26.4)\n","Requirement already satisfied: packaging\u003e=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (24.1)\n","Requirement already satisfied: sqlalchemy\u003e=1.3.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (2.0.32)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna) (4.66.5)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna) (6.0.2)\n","Collecting Mako (from alembic\u003e=1.5.0-\u003eoptuna)\n","  Downloading Mako-1.3.5-py3-none-any.whl.metadata (2.9 kB)\n","Requirement already satisfied: typing-extensions\u003e=4 in /usr/local/lib/python3.10/dist-packages (from alembic\u003e=1.5.0-\u003eoptuna) (4.12.2)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy\u003e=1.3.0-\u003eoptuna) (3.0.3)\n","Requirement already satisfied: MarkupSafe\u003e=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako-\u003ealembic\u003e=1.5.0-\u003eoptuna) (2.1.5)\n","Downloading optuna-3.6.1-py3-none-any.whl (380 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m380.1/380.1 kB\u001b[0m \u001b[31m7.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading alembic-1.13.2-py3-none-any.whl (232 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m233.0/233.0 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading colorlog-6.8.2-py3-none-any.whl (11 kB)\n","Downloading Mako-1.3.5-py3-none-any.whl (78 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.6/78.6 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: Mako, colorlog, alembic, optuna\n","Successfully installed Mako-1.3.5 alembic-1.13.2 colorlog-6.8.2 optuna-3.6.1\n"]}],"source":["!pip install pmdarima\n","!pip install optuna"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14228,"status":"ok","timestamp":1723364547561,"user":{"displayName":"Lucas Ortengren","userId":"06951531379507722380"},"user_tz":300},"id":"yhgFWtTJYpBd","outputId":"0a7e2fb2-2ddb-4471-a5cd-ec2db829124e"},"outputs":[{"name":"stdout","output_type":"stream","text":["All libraries loaded\n"]}],"source":["# baseline LSTM code\n","\n","import numpy as np\n","import optuna\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader, TensorDataset\n","import matplotlib.pyplot as plt\n","from matplotlib.pyplot import figure\n","import yfinance as yf\n","from sklearn.metrics import mean_squared_error as mse\n","import statsmodels.tsa.arima.model as ARIMA # ARIMA libaray\n","import pmdarima as pm # automatic hyperparameter tuning for ARIMA\n","import pandas as pd\n","from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n","print(\"All libraries loaded\")"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1723364547561,"user":{"displayName":"Lucas Ortengren","userId":"06951531379507722380"},"user_tz":300},"id":"LaXeuFo8ey_y"},"outputs":[],"source":["# baseline LSTM code\n","\n","config = {\n","\n","    \"yfinance\": {\n","        \"symbol\": \"NVDA\",\n","        'period': 'max',\n","        'prepost': 'True',\n","    },\n","    \"data\": {\n","        \"window_size\": 20,\n","        \"train_split_size\": 0.90,\n","    },\n","    \"plots\": {\n","        \"xticks_interval\": 90, # show a date every 90 days\n","        \"color_actual\": \"#001f3f\",\n","        \"color_train\": \"#3D9970\",\n","        \"color_val\": \"#0074D9\",\n","        \"color_pred_train\": \"#3D9970\",\n","        \"color_pred_val\": \"#0074D9\",\n","        \"color_pred_test\": \"#FF4136\",\n","    },\n","    \"model\": {\n","        \"input_size\": 1, # since we are only using 1 feature, close price\n","        \"num_lstm_layers\": 2,\n","        \"lstm_size\": 32,\n","        \"dropout\": 0.2,\n","    },\n","    \"training\": {\n","        \"device\": \"cpu\", # \"cuda\" or \"cpu\"\n","        \"batch_size\": 64,\n","        \"num_epoch\": 100,\n","        \"learning_rate\": 0.00858,\n","        \"scheduler_step_size\": 40,\n","    }\n","}\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":215},"executionInfo":{"elapsed":2086,"status":"ok","timestamp":1723364549642,"user":{"displayName":"Lucas Ortengren","userId":"06951531379507722380"},"user_tz":300},"id":"3XOvVK42TJxr","outputId":"ca50c061-ba72-4905-e701-1b9f1baafe14"},"outputs":[{"name":"stderr","output_type":"stream","text":["\r[*********************100%%**********************]  1 of 1 completed\n"]},{"name":"stdout","output_type":"stream","text":["Number data points 6429 from 1999-01-22 to 2024-08-09\n"]},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 2000x400 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["\n","# baseline LSTM code\n","\n","def download_data(config):\n","    data = yf.download(config['yfinance']['symbol'], period=config['yfinance']['period'], prepost=True)\n","    data_date = data.index.tolist()\n","    #data_date = data_date[::-1]\n","\n","    data_close_price = data['Close']\n","    #data_close_price = data_close_price[::-1]\n","    data_close_price = np.array(data_close_price)\n","\n","    num_data_points = len(data_date)\n","    display_date_range = \"from \" + str(data_date[0])[:-9] + \" to \" + str(data_date[num_data_points-1])[:-9]\n","    print(\"Number data points\", num_data_points, display_date_range)\n","\n","    return data_date, data_close_price, num_data_points, display_date_range\n","\n","data_date, data_close_price, num_data_points, display_date_range = download_data(config)\n","\n","# plot scraped stock data\n","\n","fig = figure(figsize=(25, 5), dpi=80)\n","fig.patch.set_facecolor((1.0, 1.0, 1.0))\n","plt.plot(data_date, data_close_price, color=config[\"plots\"][\"color_actual\"])\n","xtick_indices = [i for i in range(num_data_points) if (i % config[\"plots\"][\"xticks_interval\"] == 0 and (num_data_points - i) \u003e config[\"plots\"][\"xticks_interval\"]) or i == num_data_points - 1]\n","xticks_dates = [data_date[i] for i in xtick_indices]\n","xticks_labels = [str(d)[:-9] for d in xticks_dates]\n","plt.xticks(xticks_dates, xticks_labels, rotation='vertical')\n","plt.title(\"Daily close price for \" + config[\"yfinance\"][\"symbol\"] + \", \" + display_date_range)\n","plt.grid(visible=None, which='major', axis='y', linestyle='--')\n","plt.show()"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1723364549642,"user":{"displayName":"Lucas Ortengren","userId":"06951531379507722380"},"user_tz":300},"id":"EcqLKjjTh-ip"},"outputs":[],"source":["# baseline LSTM code\n","\n","class Normalizer_ARIMA():\n","    def __init__(self):\n","        self.mu = None\n","        self.sd = None\n","\n","    def fit_transform(self, x):#, x_val):\n","        self.mu = np.mean(x, axis=(0), keepdims=True)\n","        self.sd = np.std(x, axis=(0), keepdims=True)\n","        normalized_x = (x - self.mu)/self.sd\n","        #normalized_x_val = (x_val - self.mu)/self.sd\n","        return normalized_x#, normalized_x_val\n","\n","    def inverse_transform(self, x):\n","        return (x*self.sd) + self.mu\n","\n","# normalize\n","scaler_arima = Normalizer_ARIMA()\n","normalized_data_close_price = scaler_arima.fit_transform(data_close_price)"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":180},"executionInfo":{"elapsed":1713,"status":"ok","timestamp":1723364551348,"user":{"displayName":"Lucas Ortengren","userId":"06951531379507722380"},"user_tz":300},"id":"oFItP7cyGd6c","outputId":"129ce8ce-7869-40ed-b0c9-b2b549119c9d"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 2000x400 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["# baseline LSTM code\n","\n","def prepare_data_x(x, window_size):\n","    # perform windowing\n","    n_row = x.shape[0] - window_size + 1\n","    output = np.lib.stride_tricks.as_strided(x, shape=(n_row, window_size), strides=(x.strides[0], x.strides[0]))\n","    return output[:-1], output[-1]\n","\n","\n","def prepare_data_y(x, window_size):\n","    # use the next day as label\n","    output = x[window_size:]\n","    return output\n","\n","data_x, data_x_unseen = prepare_data_x(normalized_data_close_price, window_size=config[\"data\"][\"window_size\"])\n","data_y = prepare_data_y(normalized_data_close_price, window_size=config[\"data\"][\"window_size\"])\n","\n","# split dataset\n","\n","split_index = int(data_y.shape[0]*config[\"data\"][\"train_split_size\"])\n","data_x_train = data_x[:split_index]\n","data_x_val = data_x[split_index:]\n","data_y_train = data_y[:split_index]\n","data_y_val = data_y[split_index:]\n","\n","# can split data further into val vs testing if using val for hyperparameter training (not complete)\n","\n","#split_index = int(data_y_val.shape[0]*config[\"data\"][\"train_split_size\"])\n","#data_x_train = data_x[:split_index]\n","#data_x_val = data_x[split_index:]\n","\n","# normalizing data seperately, not done, function stores info so messes with inversion\n","\n","#scaler = Normalizer()\n","#data_x_train, data_x_val = scaler.fit_transform(data_x_train_split, data_x_val)\n","#data_x_train, data_x_unseen = scaler.fit_transform(data_x_train_split, data_x_unseen)\n","#data_y_train, data_y_val = scaler.fit_transform(data_y_train, data_y_val)\n","#data_x_unseen = data_x_unseen.reshape(20,)\n","\n","# prepare data for plotting\n","\n","to_plot_data_y_train = np.zeros(num_data_points)\n","to_plot_data_y_val = np.zeros(num_data_points)\n","\n","to_plot_data_y_train[config[\"data\"][\"window_size\"]:split_index+config[\"data\"][\"window_size\"]] = scaler_arima.inverse_transform(data_y_train)\n","to_plot_data_y_val[split_index+config[\"data\"][\"window_size\"]:] = scaler_arima.inverse_transform(data_y_val)\n","\n","to_plot_data_y_train = np.where(to_plot_data_y_train == 0, None, to_plot_data_y_train)\n","to_plot_data_y_val = np.where(to_plot_data_y_val == 0, None, to_plot_data_y_val)\n","\n","## plots\n","\n","fig = figure(figsize=(25, 5), dpi=80)\n","fig.patch.set_facecolor((1.0, 1.0, 1.0))\n","plt.plot(data_date, to_plot_data_y_train, label=\"Prices (train)\", color=config[\"plots\"][\"color_train\"])\n","plt.plot(data_date, to_plot_data_y_val, label=\"Prices (validation)\", color=config[\"plots\"][\"color_val\"])\n","xtick_indices = [i for i in range(num_data_points) if (i % config[\"plots\"][\"xticks_interval\"] == 0 and (num_data_points - i) \u003e config[\"plots\"][\"xticks_interval\"]) or i == num_data_points - 1]\n","xticks_dates = [data_date[i] for i in xtick_indices]\n","xticks_labels = [str(d)[:-9] for d in xticks_dates]\n","plt.xticks(xticks_dates, xticks_labels, rotation='vertical')\n","plt.title(\"Daily close prices for \" + config[\"yfinance\"][\"symbol\"] + \" - showing training and validation data\")\n","plt.grid(visible=None, which='major', axis='y', linestyle='--')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1488,"status":"ok","timestamp":1723364552829,"user":{"displayName":"Lucas Ortengren","userId":"06951531379507722380"},"user_tz":300},"id":"1EmNRUOTIeWT","outputId":"d63e197d-59e3-413a-f190-430775cc1bd3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train data shape (5768, 20, 1) (5768,)\n","Validation data shape (641, 20, 1) (641,)\n"]}],"source":["# baseline LSTM code\n","\n","class TimeSeriesDataset(Dataset):\n","    def __init__(self, x, y, n_steps, padding_value=0):\n","        x = np.expand_dims(x, 2) # in our case, we have only 1 feature, so we need to convert `x` into [batch, sequence, features] for LSTM\n","        self.x = x.astype(np.float32)\n","        self.y = y.astype(np.float32)\n","        # add padding and masks for ARIMA\n","        self.padding_value = padding_value\n","        self.n_steps = n_steps\n","        self.masks = self.create_masks(x)\n","\n","    def create_masks(self, x):\n","        # init masks\n","        masks = np.ones_like(x, dtype=np.float32)\n","        # det length\n","        seq_length = x.shape[1]\n","        # mask padding\n","        for i in range(len(x)):\n","            if np.all(x[i, :self.n_steps] == self.padding_value):\n","                masks[i, :self.n_steps] = 0\n","            else:\n","                for j in range(seq_length):\n","                    if x[i, j] == self.padding_value:\n","                        masks[i, j] = 0\n","\n","        return masks\n","\n","    def __len__(self):\n","        return len(self.x)\n","\n","    def __getitem__(self, idx):\n","      #if self.masks is None:\n","        return (self.x[idx], self.y[idx], self.masks[idx])\n","      #else:\n","        #return (self.x[idx], self.y[idx])\n","\n","# uncomment if using LSTM only\n","\n","dataset_train = TimeSeriesDataset(data_x_train, data_y_train, n_steps=config['data']['window_size'], padding_value=0)\n","dataset_val = TimeSeriesDataset(data_x_val, data_y_val, n_steps=config['data']['window_size'], padding_value=0)\n","\n","print(\"Train data shape\", dataset_train.x.shape, dataset_train.y.shape)\n","print(\"Validation data shape\", dataset_val.x.shape, dataset_val.y.shape)\n","\n","#train_dataloader = DataLoader(dataset_train, batch_size=config[\"training\"][\"batch_size\"], shuffle=True)\n","#val_dataloader = DataLoader(dataset_val, batch_size=config[\"training\"][\"batch_size\"], shuffle=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"ClF1CAyZ0jeh"},"outputs":[{"name":"stdout","output_type":"stream","text":["Performing stepwise search to minimize aic\n"," ARIMA(2,0,2)(0,0,0)[0]             : AIC=-37558.374, Time=105.55 sec\n"," ARIMA(0,0,0)(0,0,0)[0]             : AIC=-37555.709, Time=16.59 sec\n"," ARIMA(1,0,0)(0,0,0)[0]             : AIC=-37553.894, Time=4.49 sec\n"," ARIMA(0,0,1)(0,0,0)[0]             : AIC=-37553.891, Time=33.99 sec\n"," ARIMA(1,0,2)(0,0,0)[0]             : AIC=-37552.326, Time=81.82 sec\n"," ARIMA(2,0,1)(0,0,0)[0]             : AIC=-37550.305, Time=30.74 sec\n"," ARIMA(3,0,2)(0,0,0)[0]             : AIC=-37557.949, Time=86.01 sec\n"," ARIMA(2,0,3)(0,0,0)[0]             : AIC=-37546.921, Time=11.22 sec\n"," ARIMA(1,0,1)(0,0,0)[0]             : AIC=-37551.977, Time=34.02 sec\n"," ARIMA(1,0,3)(0,0,0)[0]             : AIC=-37548.652, Time=54.61 sec\n"," ARIMA(3,0,1)(0,0,0)[0]             : AIC=-37548.442, Time=36.06 sec\n"," ARIMA(3,0,3)(0,0,0)[0]             : AIC=-37544.449, Time=79.95 sec\n"," ARIMA(2,0,2)(0,0,0)[0] intercept   : AIC=-37551.419, Time=67.39 sec\n","\n","Best model:  ARIMA(2,0,2)(0,0,0)[0]          \n","Total fit time: 642.500 seconds\n"]}],"source":["# ARIMA auto hyperameterization modeling function info from alkaline-ml\n","\n","model = pm.auto_arima(\n","    dataset_train.y,\n","    dataset_train.x.reshape(dataset_train.x.shape[0],dataset_train.x.shape[1]),\n","    seasonal=False,\n","    stepwise=True,\n","    trace=True\n","    )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"LvD-FN_69mqZ"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train MSE: 8.62674520342618e-05\n","Validation MSE: 0.014090000645804136\n"]}],"source":["# evaluating ARIMA performance built with help of chatgpt\n","\n","arima_train_pred = model.predict_in_sample(dataset_train.x.reshape(dataset_train.x.shape[0],dataset_train.x.shape[1]))\n","arima_val_pred = model.predict(n_periods=len(dataset_val.y), X=dataset_val.x.reshape(dataset_val.x.shape[0],dataset_val.x.shape[1]))\n","#arima_unseen_pred = model.predict(n_periods=len(data_x_unseen), X=data_x_unseen.reshape(data_x_unseen.shape[0],data_x_unseen.shape[1]))\n","\n","train_residuals = dataset_train.y - arima_train_pred\n","val_residuals = dataset_val.y - arima_val_pred\n","\n","train_mse = mse(dataset_train.y, arima_train_pred)\n","val_mse = mse(dataset_val.y, arima_val_pred)\n","\n","print(\"Train MSE:\", train_mse)\n","print(\"Validation MSE:\", val_mse)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"QwASe_n-MoFv"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 1200x600 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"},{"data":{"text/plain":["\u003cFigure size 1200x800 with 0 Axes\u003e"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 640x480 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 640x480 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAA+oAAAKqCAYAAACtsaQKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACIdklEQVR4nOzdeVxVdeL/8fcF5SIam2ySKKKmUioNJmGLloygtthYaWPjMqZlWmNYKvNNTW1irMaxxYlq0vSXjmZl+1CE2WqaOmaLOmqaG4sbXAEFhfP7w+HmlUW2A+fW6/l43Ifecz7ncz9n4973WT7HZhiGIQAAAAAAYAkeTd0AAAAAAADwM4I6AAAAAAAWQlAHAAAAAMBCCOoAAAAAAFgIQR0AAAAAAAshqAMAAAAAYCEEdQAAAAAALISgDgAAAACAhRDUAQAAAACwEII6AABodGvXrpXNZtPatWsbtF6bzaZHHnmkQesEAKCxEdQBAKinf/zjH7LZbIqLi6tXPe+//z4hswZYTgCAXzqCOgAA9bRs2TJFRkZqw4YN2rVrV53ref/99zV79uwGbNkvU3XL6eTJk3r44YcbuUUAADQsgjoAAPWwZ88effnll5o/f76Cg4O1bNmypm6SqYqKiiodfubMGZWUlDRyayry9vZWs2bNmroZAADUC0EdAIB6WLZsmQICAjR48GDdeuutFYJ6Vfdi7927VzabTS+//LIkafTo0Vq4cKGks/dZl7/KFRYWasqUKYqIiJDdbleXLl305JNPyjCMCm165ZVX1Lt3b/n4+CggIEDXXnutPvzwQ5cy//jHP3TppZfKbrcrPDxcEydOVF5enkuZfv366bLLLtOmTZt07bXXysfHR3/+85+dbX/yySe1YMECdezYUXa7XT/88IMkafv27br11lsVGBgob29v9erVS2+//fYFl+Vnn32m2267Te3atZPdbldERIQeeOABnTx50lnmQsupsnvU//Of/2jgwIHy9fVVq1at1L9/f3311VcuZV5++WXZbDZ98cUXSk5OVnBwsFq2bKlbbrlFhw8fvmDbAQBoSBxyBgCgHpYtW6bf/e538vLy0h133KHnnntOX3/9ta644opa1XP33Xfr0KFDysjI0P/7f//PZZxhGLrpppv08ccfa+zYsYqJidEHH3yghx56SAcPHtTf//53Z9nZs2frkUceUZ8+fTRnzhx5eXlp/fr1WrNmjQYMGCBJeuSRRzR79mwlJCRowoQJ2rFjh7PdX3zxhZo3b+6s7+jRoxo4cKCGDx+uO++8U6Ghoc5xixcv1qlTpzR+/HjZ7XYFBgbq+++/11VXXaWLL75Y06dPV8uWLfXqq69qyJAhev3113XLLbdUuQxWrVqloqIiTZgwQa1bt9aGDRv0zDPP6MCBA1q1atUFl1Nlvv/+e11zzTXy9fXV1KlT1bx5cz3//PPq16+fPvnkkwr9Ctx3330KCAjQrFmztHfvXi1YsECTJk3SypUrL/hZAAA0GAMAANTJxo0bDUlGRkaGYRiGUVZWZrRt29b405/+5Czz8ccfG5KMjz/+2GXaPXv2GJKMxYsXO4dNnDjRqOyr+c033zQkGY8++qjL8FtvvdWw2WzGrl27DMMwjJ07dxoeHh7GLbfcYpSWlrqULSsrMwzDMHJzcw0vLy9jwIABLmWeffZZQ5KxaNEi57C+ffsakoy0tLRK2+7r62vk5ua6jOvfv7/RvXt349SpUy6f3adPH6Nz587VLpeioqIK856ammrYbDbjp59+uuByMgzDkGTMmjXL+X7IkCGGl5eXsXv3buewQ4cOGRdddJFx7bXXOoctXrzYkGQkJCQ4l5VhGMYDDzxgeHp6Gnl5eZV+HgAAZuDSdwAA6mjZsmUKDQ3VddddJ+nsZdfDhg3TihUrVFpa2mCf8/7778vT01P333+/y/ApU6bIMAz9+9//liS9+eabKisr08yZM+Xh4foVX355+EcffaSSkhJNnjzZpcy4cePk6+ur9957z2U6u92uMWPGVNquoUOHKjg42Pn+2LFjWrNmjW6//XadOHFCR44c0ZEjR3T06FElJiZq586dOnjwYJXz2aJFC+f/CwsLdeTIEfXp00eGYeg///lPdYuoUqWlpfrwww81ZMgQRUVFOYe3adNGv//97/X555/L4XC4TDN+/HiXS+mvueYalZaW6qeffqr15wMAUFcEdQAA6qC0tFQrVqzQddddpz179mjXrl3atWuX4uLilJOTo8zMzAb7rJ9++knh4eG66KKLXIZ369bNOV6Sdu/eLQ8PD0VHR1dblyR16dLFZbiXl5eioqIqBNKLL75YXl5eldbVoUMHl/e7du2SYRiaMWOGgoODXV6zZs2SJOXm5lbZtn379mn06NEKDAxUq1atFBwcrL59+0qS8vPzq5yuKocPH1ZRUVGFeZXOLruysjLt37/fZXi7du1c3gcEBEiSjh8/XuvPBwCgrrhHHQCAOlizZo2ysrK0YsUKrVixosL4ZcuWacCAAS5nZ8/VkGfczXTuWe4LjSsrK5MkPfjgg0pMTKx0mk6dOlU6vLS0VL/97W917NgxTZs2TV27dlXLli118OBBjR492lm32Tw9PSsdblTSaR8AAGYhqAMAUAfLli1TSEiIswfyc73xxhtavXq10tLSnGdkz+9RvbJLqasK9e3bt9dHH32kEydOuJxV3759u3O8JHXs2FFlZWX64YcfFBMTU2VdkrRjxw6Xy8FLSkq0Z88eJSQkVDHHF1ZeX/PmzWtdz7fffqv//ve/WrJkiUaOHOkcnpGRUaFsVcvpfMHBwfLx8dGOHTsqjNu+fbs8PDwUERFRq3YCANAYuPQdAIBaOnnypN544w3dcMMNuvXWWyu8Jk2apBMnTujtt99W+/bt5enpqU8//dSljn/84x8V6m3ZsqWkiqF+0KBBKi0t1bPPPusy/O9//7tsNpsGDhwoSRoyZIg8PDw0Z86cCmegy88IJyQkyMvLS08//bTLWeKXXnpJ+fn5Gjx4cN0WiqSQkBD169dPzz//vLKysiqMr+4xZ+Vnss9tk2EYeuqppyqUrWo5VVbngAED9NZbb2nv3r3O4Tk5OVq+fLmuvvpq+fr6VlsHAABNgTPqAADU0ttvv60TJ07opptuqnT8lVdeqeDgYC1btkzDhg3TbbfdpmeeeUY2m00dO3bUu+++W+m92rGxsZKk+++/X4mJifL09NTw4cN144036rrrrtP//d//ae/everZs6c+/PBDvfXWW5o8ebI6duwo6exl5f/3f/+nuXPn6pprrtHvfvc72e12ff311woPD1dqaqqCg4OVkpKi2bNnKykpSTfddJN27Nihf/zjH7riiit055131mvZLFy4UFdffbW6d++ucePGKSoqSjk5OVq3bp0OHDigb775ptLpunbtqo4dO+rBBx/UwYMH5evrq9dff73Se8OrWk6VefTRR5WRkaGrr75a9957r5o1a6bnn39excXFevzxx+s1rwAAmKbpOpwHAMA93XjjjYa3t7dRWFhYZZnRo0cbzZs3N44cOWIcPnzYGDp0qOHj42MEBAQYd999t/Hdd99VeDzbmTNnjPvuu88IDg42bDabyyPITpw4YTzwwANGeHi40bx5c6Nz587GE0884fIosXKLFi0yLr/8csNutxsBAQFG3759nY+QK/fss88aXbt2NZo3b26EhoYaEyZMMI4fP+5Spm/fvsall15aof7yx7M98cQTlc777t27jZEjRxphYWFG8+bNjYsvvti44YYbjNdee81ZprLHs/3www9GQkKC0apVKyMoKMgYN26c8c0339RqOem8x7MZhmFs3rzZSExMNFq1amX4+PgY1113nfHll1+6lCl/PNvXX3/tMryqx+sBAGAmm2HQOwoAAAAAAFbBPeoAAAAAAFgIQR0AAAAAAAshqAMAAAAAYCGmBvVPP/1UN954o8LDw2Wz2fTmm29ecJq1a9fqN7/5jex2uzp16qSXX365QpmFCxcqMjJS3t7eiouL04YNGxq+8QAAAAAANAFTg3phYaF69uyphQsX1qj8nj17NHjwYF133XXasmWLJk+erLvuuksffPCBs8zKlSuVnJysWbNmafPmzerZs6cSExMrfcwNAAAAAADuptF6fbfZbFq9erWGDBlSZZlp06bpvffe03fffeccNnz4cOXl5Sk9PV2SFBcXpyuuuELPPvusJKmsrEwRERG67777NH36dFPnAQAAAAAAszVr6gaca926dUpISHAZlpiYqMmTJ0uSSkpKtGnTJqWkpDjHe3h4KCEhQevWrauy3uLiYhUXFzvfl5WV6dixY2rdurVsNlvDzgQAAAAAAOcxDEMnTpxQeHi4PDyqv7jdUkE9OztboaGhLsNCQ0PlcDh08uRJHT9+XKWlpZWW2b59e5X1pqamavbs2aa0GQAAAACAmtq/f7/atm1bbRlLBXWzpKSkKDk52fk+Pz9f7dq10/79++Xr69uELavo7xn/1ctf7lVpWcU7Ejw9bBrdJ1IP/PaSJmgZAAAAAKCuHA6HIiIidNFFF12wrKWCelhYmHJyclyG5eTkyNfXVy1atJCnp6c8PT0rLRMWFlZlvXa7XXa7vcJwX19fywX1kX27acnGHHlU0nOAzSaN6ttNvr4tG79hAAAAAIB6q8nt15Z6jnp8fLwyMzNdhmVkZCg+Pl6S5OXlpdjYWJcyZWVlyszMdJZxdx2CWmre0B7yOGfdedps8rBJ84b2UGQQIR0AAAAAfslMPaNeUFCgXbt2Od/v2bNHW7ZsUWBgoNq1a6eU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12hUu94CAwM1e/ZsDR06VGFhYdq9e7emTp2qTp06KTExsQlb/es2ceJELV++XG+99ZYuuugi5715fn5+atGihfz8/DR27FglJycrMDBQvr6+uu+++xQfH68rr7yyiVv/63Wh9bZ7924tX75cgwYNUuvWrbV161Y98MADuvbaays8ogiNIyUlRQMHDlS7du104sQJLV++XGvXrtUHH3zAfmZh1a039jPruuiii1z67JCkli1bqnXr1s7hDbbPNVwn9WhozzzzjNGuXTvDy8vL6N27t/HVV181dZNQjWHDhhlt2rQxvLy8jIsvvtgYNmyYsWvXrqZuFs7z8ccfG5IqvEaNGmUYxtlHtM2YMcMIDQ017Ha70b9/f2PHjh1N22hUu96KioqMAQMGGMHBwUbz5s2N9u3bG+PGjTOys7Obutm/apWtL0nG4sWLnWVOnjxp3HvvvUZAQIDh4+Nj3HLLLUZWVlbTNRoXXG/79u0zrr32WiMwMNCw2+1Gp06djIceesjIz89v2ob/iv3xj3802rdvb3h5eRnBwcFG//79jQ8//NA5nv3Mmqpbb+xn7uX8R+k11D5nMwzDqP2xBAAAAAAAYAbuUQcAAAAAwEII6gAAAAAAWAhBHQAAAAAACyGoAwAAAABgIQR1AAAAAAAshKAOAAAAAICFENQBAAAAALAQgjoAAAAAABZCUAcAAAAAwEII6gAAAAAAWAhBHQAAAAAACyGoAwAAAABgIQR1AAAayCOPPCKbzVanafv166d+/fo1bINQKTOWdX3WPQAA5yOoAwB+EV5++WXZbDbny9vbW5dccokmTZqknJycBvucoqIiPfLII1q7dm2D1VkXpaWlCg8Pl81m07///e961WWVebI6lhMAoLEQ1AEAvyhz5szR//t//0/PPvus+vTpo+eee07x8fEqKipqkPqLioo0e/bsSsPaww8/rJMnTzbI51zImjVrlJWVpcjISC1btqxedVU3T/iZVdY9AOCXr1lTNwAAgIY0cOBA9erVS5J01113qXXr1po/f77eeust3XHHHXWut6ysTCUlJdWWadasmZo1a5yv1ldeeUW/+c1vNGrUKP35z39WYWGhWrZs2Sif3RROnTolLy8veXhUPMdghXlvzHUPAPjl44w6AOAX7frrr5ck7dmzR5L05JNPqk+fPmrdurVatGih2NhYvfbaaxWms9lsmjRpkpYtW6ZLL71UdrtdaWlpCg4OliTNnj3beZn9I488Iqny+5QXL16s66+/XiEhIbLb7YqOjtZzzz1Xr3k6efKkVq9ereHDh+v222/XyZMn9dZbb1UoV9W92KNHj1ZkZKQkae/evdXOk3T27P0111yjli1byt/fXzfffLO2bdtWod6DBw9q7NixCg8Pl91uV4cOHTRhwgSXAxw//vijbrvtNgUGBsrHx0dXXnml3nvvPZd61q5dK5vNphUrVujhhx/WxRdfLB8fHzkcDo0ePVqtWrXS7t27NWjQIF100UUaMWKEpLMHUxYsWKBLL71U3t7eCg0N1d13363jx49XuzxLSko0c+ZMxcbGys/PTy1bttQ111yjjz/+2FnmQsupsnV/5swZzZ07Vx07dpTdbldkZKT+/Oc/q7i42KVcZGSkbrjhBn3++efq3bu3vL29FRUVpaVLl1bbbgDALxeHfgEAv2i7d++WJLVu3VqS9NRTT+mmm27SiBEjVFJSohUrVui2227Tu+++q8GDB7tMu2bNGr366quaNGmSgoKC1LNnTz333HOaMGGCbrnlFv3ud7+TJPXo0aPKz3/uued06aWX6qabblKzZs30zjvv6N5771VZWZkmTpxYp3l6++23VVBQoOHDhyssLEz9+vXTsmXL9Pvf/77WdQUHB1c7Tx999JEGDhyoqKgoPfLIIzp58qSeeeYZXXXVVdq8ebMz8B86dEi9e/dWXl6exo8fr65du+rgwYN67bXXVFRUJC8vL+Xk5KhPnz4qKirS/fffr9atW2vJkiW66aab9Nprr+mWW25xadvcuXPl5eWlBx98UMXFxfLy8pJ0NgAnJibq6quv1pNPPikfHx9J0t13362XX35ZY8aM0f333689e/bo2Wef1X/+8x998cUXat68eaXLwOFw6J///KfuuOMOjRs3TidOnNBLL72kxMREbdiwQTExMRdcTpW56667tGTJEt16662aMmWK1q9fr9TUVG3btk2rV692Kbtr1y7deuutGjt2rEaNGqVFixZp9OjRio2N1aWXXlrLtQoAcHsGAAC/AIsXLzYkGR999JFx+PBhY//+/caKFSuM1q1bGy1atDAOHDhgGIZhFBUVuUxXUlJiXHbZZcb111/vMlyS4eHhYXz//fcuww8fPmxIMmbNmlWhDbNmzTLO/2o9//MMwzASExONqKgol2F9+/Y1+vbtW6N5veGGG4yrrrrK+f6FF14wmjVrZuTm5taozlGjRhnt27d3vq9unmJiYoyQkBDj6NGjzmHffPON4eHhYYwcOdI5bOTIkYaHh4fx9ddfV6ijrKzMMAzDmDx5siHJ+Oyzz5zjTpw4YXTo0MGIjIw0SktLDcMwjI8//tiQZERFRVVYfqNGjTIkGdOnT3cZ/tlnnxmSjGXLlrkMT09PrzD8/OVy5swZo7i42GW648ePG6GhocYf//jHGi2n89f9li1bDEnGXXfd5VLuwQcfNCQZa9ascQ5r3769Icn49NNPncNyc3MNu91uTJkypcJnAQB++bj0HQDwi5KQkKDg4GBFRERo+PDhatWqlVavXq2LL75YktSiRQtn2ePHjys/P1/XXHONNm/eXKGuvn37Kjo6ul7tOffz8vPzdeTIEfXt21c//vij8vPza13f0aNH9cEHH7jcbz906FDZbDa9+uqr9Wrr+bKysrRlyxaNHj1agYGBzuE9evTQb3/7W73//vuSzl5y/uabb+rGG2909g9wrvJLwt9//3317t1bV199tXNcq1atNH78eO3du1c//PCDy3SjRo1yWX7nmjBhgsv7VatWyc/PT7/97W915MgR5ys2NlatWrVyuYz9fJ6ens6z9WVlZTp27JjOnDmjXr16Vbpd1ET5sklOTnYZPmXKFEmqcLl/dHS0rrnmGuf74OBgdenSRT/++GOdPh8A4N649B0A8IuycOFCXXLJJWrWrJlCQ0PVpUsXlw7I3n33XT366KPasmWLy73ClT0Du0OHDvVuzxdffKFZs2Zp3bp1FXqez8/Pl5+fX63qW7lypU6fPq3LL79cu3btcg6Pi4vTsmXL6nw5fWV++uknSVKXLl0qjOvWrZs++OADFRYWqqCgQA6HQ5dddtkF64uLi6u0rvLx59ZR1fJv1qyZ2rZt6zJs586dys/PV0hISKXT5ObmVtu2JUuW6G9/+5u2b9+u06dPX7ANF/LTTz/Jw8NDnTp1chkeFhYmf39/57It165duwp1BAQEXPD+egDALxNBHQDwi9K7d+9Kz+pK0meffaabbrpJ1157rf7xj3+oTZs2at68uRYvXqzly5dXKF/V2dya2r17t/r376+uXbtq/vz5ioiIkJeXl95//339/e9/V1lZWa3rLH8U21VXXVXp+B9//FFRUVGSzh58MAyjQpnS0tJaf25TqGr52+32Cr2/l5WVKSQkpMpH1ZV3BFeZV155RaNHj9aQIUP00EMPKSQkRJ6enkpNTXX2cVBXlR0Aqoynp2elwytbfwCAXz6COgDgV+P111+Xt7e3PvjgA9ntdufwxYsX17iOmgYvSXrnnXdUXFyst99+2+WMaXWXYVdnz549+vLLLzVp0iT17dvXZVxZWZn+8Ic/aPny5Xr44YclnT0jW9ml0+efza1qntq3by9J2rFjR4Vx27dvV1BQkFq2bKkWLVrI19dX3333XbXtb9++fZV1nft5ddGxY0d99NFHuuqqq2p9gOW1115TVFSU3njjDZdlMWvWLJdytVn37du3V1lZmXbu3Om8YkCScnJylJeXV695BQD88nGPOgDgV8PT01M2m83ljPLevXv15ptv1riO8h7G8/LyavR5kutZ0fz8/FodGDhX+dniqVOn6tZbb3V53X777erbt6/LGeWOHTtq+/btOnz4sHPYN998oy+++KJG89SmTRvFxMRoyZIlLuO+++47ffjhhxo0aJAkycPDQ0OGDNE777yjjRs3Vmh3+fwPGjRIGzZs0Lp165zjCgsL9cILLygyMrJe/QHcfvvtKi0t1dy5cyuMO3PmTLXrq7L1tH79epd2SrVb9+XLZsGCBS7D58+fL0kVnjAAAMC5OKMOAPjVGDx4sObPn6+kpCT9/ve/V25urhYuXKhOnTpp69atNaqjRYsWio6O1sqVK3XJJZcoMDBQl112WaX3Zw8YMEBeXl668cYbdffdd6ugoEAvvviiQkJClJWVVev2L1u2TDExMYqIiKh0/E033aT77rtPmzdv1m9+8xv98Y9/1Pz585WYmKixY8cqNzdXaWlpuvTSS+VwOGo0T0888YQGDhyo+Ph4jR071vl4Nj8/P5dnrT/22GP68MMP1bdvX40fP17dunVTVlaWVq1apc8//1z+/v6aPn26/vWvf2ngwIG6//77FRgYqCVLlmjPnj16/fXXK1zOXht9+/bV3XffrdTUVG3ZskUDBgxQ8+bNtXPnTq1atUpPPfWUbr311kqnveGGG/TGG2/olltu0eDBg7Vnzx6lpaUpOjpaBQUFNVpO5+vZs6dGjRqlF154QXl5eerbt682bNigJUuWaMiQIbruuuvqPK8AgF+BJu1zHgCABlL+eLbKHg92rpde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\n","text/plain":["\u003cFigure size 1200x800 with 2 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["# code edited from perplexity help\n","\n","# Plot predicted vs actual\n","plt.figure(figsize=(12,6))\n","plt.plot(data_date[-30:], data_close_price[-30:], label='Actual')\n","plt.plot(data_date[-30:], scaler_arima.inverse_transform(np.concatenate((arima_train_pred, arima_val_pred))[-30:]), color='red', label='Predicted')\n","plt.legend()\n","plt.title('ARIMA: Actual vs Predicted')\n","plt.show()\n","# Residual plots\n","residuals = pd.DataFrame(model.resid())\n","plt.figure(figsize=(12,8))\n","residuals.plot()\n","plt.title('Residuals')\n","residuals.plot(kind='kde')\n","plt.title('Density Plot of Residuals')\n","plt.tight_layout()\n","plt.show()\n","# ACF and PACF of residuals\n","fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n","plot_acf(model.resid(), ax=ax1)\n","plot_pacf(model.resid(), ax=ax2)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"q49dK1ecgyuY"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 2000x400 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Predicted close price of the next trading day: 102.67\n"]}],"source":["# predict the closing price of the next trading day\n","\n","x = torch.tensor(data_x_unseen).float().to(config[\"training\"][\"device\"]).unsqueeze(0).unsqueeze(2) # this is the data type and shape required, [batch, sequence, feature]\n","prediction =  model.predict(n_periods=1, X=dataset_val.x[-1].reshape(1,-1))\n","\n","# prepare plots\n","\n","plot_range = 20\n","to_plot_data_y_val = np.zeros(plot_range)\n","to_plot_data_y_val_pred = np.zeros(plot_range)\n","to_plot_data_y_test_pred = np.zeros(plot_range)\n","\n","to_plot_data_y_val[:plot_range-1] = scaler_arima.inverse_transform(data_y_val)[-plot_range+1:]\n","to_plot_data_y_val_pred[:plot_range-1] = scaler_arima.inverse_transform(arima_val_pred)[-plot_range+1:]\n","\n","predicted_value = scaler_arima.inverse_transform(prediction).flatten()[0]\n","\n","to_plot_data_y_test_pred[plot_range-1] = predicted_value\n","\n","to_plot_data_y_val = np.where(to_plot_data_y_val == 0, None, to_plot_data_y_val)\n","to_plot_data_y_val_pred = np.where(to_plot_data_y_val_pred == 0, None, to_plot_data_y_val_pred)\n","to_plot_data_y_test_pred = np.where(to_plot_data_y_test_pred == 0, None, to_plot_data_y_test_pred)\n","\n","# plot\n","\n","plot_date_test = data_date[-plot_range+1:]\n","plot_date_test = [str(d)[:-9] for d in plot_date_test]\n","plot_date_test.append(\"tomorrow\")\n","fig = figure(figsize=(25, 5), dpi=80)\n","fig.patch.set_facecolor((1.0, 1.0, 1.0))\n","# code below edited for yfinance implementation\n","plt.plot(plot_date_test, to_plot_data_y_val, label=\"Actual prices\", marker=\".\", markersize=10, color=config[\"plots\"][\"color_actual\"])\n","plt.plot(plot_date_test, to_plot_data_y_val_pred, label=\"Past predicted prices\", marker=\".\", markersize=10, color=config[\"plots\"][\"color_pred_val\"])\n","plt.plot(plot_date_test, to_plot_data_y_test_pred, label=\"Predicted price for next day\", marker=\".\", markersize=20, color=config[\"plots\"][\"color_pred_test\"])\n","plt.title(\"Predicted close price of the next trading day\")\n","plt.grid(visible=None, which='major', axis='y', linestyle='--')\n","plt.legend()\n","\n","plt.show()\n","\n","print(\"Predicted close price of the next trading day:\", round(to_plot_data_y_test_pred[plot_range-1], 2))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"8-TYePCFStSZ"},"outputs":[],"source":["class Normalizer_LSTM():\n","    def __init__(self):\n","        self.mu = None\n","        self.sd = None\n","\n","    def fit_transform(self, x, x_val):\n","        self.mu = np.mean(x, axis=(0), keepdims=True)\n","        self.sd = np.std(x, axis=(0), keepdims=True)\n","        normalized_x = (x - self.mu)/self.sd\n","        normalized_x_val = (x_val - self.mu)/self.sd\n","        return normalized_x, normalized_x_val\n","\n","    def inverse_transform(self, x):\n","        return (x*self.sd) + self.mu\n","\n","scaler = Normalizer_LSTM()\n","norm_train_residuals, norm_val_residuals = scaler.fit_transform(train_residuals, val_residuals)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"z7uVymcFNQMd"},"outputs":[],"source":["# code devolped with help of chatgpt\n","# pre-process ARIMA data for use in LSTM\n","\n","n_steps = config['data']['window_size']\n","\n","def create_sequences(data, n_steps):\n","    X, y = [], []\n","    # added padding as ARIMA shortens dataset by n_steps\n","    padding = np.zeros(n_steps)\n","    padded_data = np.concatenate((padding, data))\n","    # added masking so padded data not used in LSTM training\n","    mask = np.ones_like(padded_data, dtype=bool)\n","    mask[:len(padding)] = False\n","    for i in range(len(padded_data) - n_steps):\n","        seq_x, seq_y = padded_data[i:i + n_steps], padded_data[i + n_steps]\n","        X.append(seq_x)\n","        y.append(seq_y)\n","    return np.array(X), np.array(y)\n","\n","\n","# Prepare residuals data\n","X_train, y_train = create_sequences(norm_train_residuals, n_steps)\n","X_val, y_val = create_sequences(norm_val_residuals, n_steps)\n","\n","# Reshape for LSTM\n","n_features = 1\n","X_train = X_train.reshape((X_train.shape[0], X_train.shape[1]))\n","X_val = X_val.reshape((X_val.shape[0], X_val.shape[1]))\n","\n","# Create DataLoaders\n","dataset_train = TimeSeriesDataset(X_train, y_train, n_steps=config['data']['window_size'], padding_value=0)\n","dataset_val = TimeSeriesDataset(X_val, y_val, n_steps=config['data']['window_size'], padding_value=0)\n","train_dataloader = DataLoader(dataset_train, batch_size=config[\"training\"][\"batch_size\"], shuffle=True)\n","val_dataloader = DataLoader(dataset_val, batch_size=config[\"training\"][\"batch_size\"], shuffle=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"KOpZa8pBJDPh"},"outputs":[],"source":["# rewriting Lucas' tensorflow model into pytorch using baseline as framework\n","\n","#Best hyperparameters:  {'hidden_layer_size': 97, 'num_layers': 1, 'dropout': 0.5637189294452587, 'lr': 0.00858783229308726}\n","#Best MSE:  159.96661376953125\n","\n","class LSTMModel(nn.Module):\n","    def __init__(self, input_size=1, hidden_layer_size=97, num_layers=1, output_size=1, dropout=0.563):\n","        super().__init__()\n","\n","        self.hidden_layer_size = hidden_layer_size\n","\n","        # Linear layer with GELU activation\n","        self.linear_1 = nn.Linear(input_size, hidden_layer_size)\n","        self.gelu = nn.GELU()\n","        # LSTM layers\n","        self.lstm = nn.LSTM(\n","            input_size=hidden_layer_size,\n","            hidden_size=hidden_layer_size,\n","            num_layers=num_layers,\n","            dropout=dropout,\n","            batch_first=True\n","        )\n","\n","        # Dropout layer\n","        self.dropout = nn.Dropout(dropout)\n","\n","        # Output linear layer\n","        self.linear_2 = nn.Linear(hidden_layer_size, output_size)\n","\n","  # og model\n","#        self.linear_1 = nn.Linear(input_size, hidden_layer_size)\n","#        self.relu = nn.ReLU()\n","#        self.lstm = nn.LSTM(hidden_layer_size, hidden_size=self.hidden_layer_size, num_layers=num_layers, batch_first=True)\n","#        self.dropout = nn.Dropout(dropout)\n","#        self.linear_2 = nn.Linear(num_layers*hidden_layer_size, output_size)\n","\n","#        self.init_weights()\n","\n","    def init_weights(self):\n","        for name, param in self.lstm.named_parameters():\n","            if 'bias' in name:\n","                 nn.init.constant_(param, 0.0)\n","            elif 'weight_ih' in name:\n","                 nn.init.kaiming_normal_(param)\n","            elif 'weight_hh' in name:\n","                 nn.init.orthogonal_(param)\n","\n","    def forward(self, x, mask=None):\n","        batchsize = x.shape[0]\n","        seq_length = x.shape[1]\n","\n","        # layer 1\n","        x = self.linear_1(x)\n","        x = self.gelu(x)\n","        # LSTM layer\n","        lstm_out, (h_n, c_n) = self.lstm(x)\n","\n","        # reshape output from hidden cell into [batch, features] for `linear_2`\n","        x = h_n[-1, :, :] #.permute(1, 0, 2).reshape(batchsize, -1)\n","\n","        # layer 2\n","        x = self.dropout(x)\n","        predictions = self.linear_2(x)\n","        if mask is not None:\n","          mask = mask.unsqueeze(-1)\n","          predictions = predictions * mask\n","\n","        return predictions"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"o76tRrd8G12K"},"outputs":[],"source":["# optuna hyperparameter training implementation with help from chatgpt\n","\n","def objective(trial):\n","    # Define hyperparameters\n","    input_size = 1\n","    hidden_layer_size = trial.suggest_int('hidden_layer_size', 16, 128)\n","    num_layers = trial.suggest_int('num_layers', 1, 5)\n","    dropout = trial.suggest_float('dropout', 0.1, 0.6)\n","    output_size = 1\n","\n","    # Create model\n","    model = LSTMModel(input_size, hidden_layer_size, num_layers, output_size, dropout)\n","\n","    # Define optimizer and loss function\n","    optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","    criterion = nn.MSELoss()\n","\n","    n_features = 1\n","    X_train_opt = X_train.reshape((X_train.shape[0], X_train.shape[1]))\n","    X_val_opt = X_val.reshape((X_val.shape[0], X_val.shape[1]))\n","\n","    # Create DataLoaders seperate from previous creation\n","    dataset_train_opt = TimeSeriesDataset(X_train_opt, y_train, n_steps=config['data']['window_size'], padding_value=0)\n","    dataset_val_opt = TimeSeriesDataset(X_val_opt, y_val, n_steps=config['data']['window_size'], padding_value=0)\n","    train_dataloader_opt = DataLoader(dataset_train_opt, batch_size=config[\"training\"][\"batch_size\"], shuffle=True)\n","    val_dataloader_opt = DataLoader(dataset_val_opt, batch_size=config[\"training\"][\"batch_size\"], shuffle=True)\n","\n","    # training and evaluate loop edited with chatgpt to include unpackaging of mask\n","\n","    # Training loop\n","    model.train()\n","    for epoch in range(1):  # Number of epochs\n","        epoch_loss = 0\n","        for X_batch, y_batch, mask in train_dataloader_opt:\n","            optimizer.zero_grad()\n","            # Move data to the appropriate device\n","            X_batch = X_batch.to(config[\"training\"][\"device\"])\n","            y_batch = y_batch.to(config[\"training\"][\"device\"])\n","            mask = mask.to(config[\"training\"][\"device\"])\n","            # Forward pass\n","            output = model(X_batch, mask)\n","            if mask.dim() == 3 and output.dim() == 4:\n","                mask = mask.unsqueeze(2).expand(-1, -1, output.size(2), -1)\n","            # Apply mask to predictions and targets\n","            masked_output = output * mask\n","            masked_y_batch = y_batch * mask\n","            # Compute loss\n","            loss = criterion(masked_output, masked_y_batch)\n","            # Backward pass and optimization\n","            loss.backward()\n","            optimizer.step()\n","            # Accumulate loss for the epoch\n","            batch_size = X_batch.size(0)\n","            epoch_loss += loss.item() * batch_size\n","        # Average loss for the epoch\n","        avg_epoch_loss = epoch_loss / len(train_dataloader_opt.dataset)\n","        #print(f'Epoch {epoch + 1}, Loss: {avg_epoch_loss}')\n","\n","    # Evaluate on validation set\n","    model.eval()\n","    with torch.no_grad():\n","        val_pred = []\n","        val_true = []\n","        for X_batch, y_batch, mask in val_dataloader_opt:\n","            X_batch = X_batch.to(config[\"training\"][\"device\"])\n","            y_batch = y_batch.to(config[\"training\"][\"device\"])\n","            mask = mask.to(config[\"training\"][\"device\"])\n","            # Forward pass\n","            output = model(X_batch)\n","            mask = mask.unsqueeze(-1).expand(-1, -1, output.size(1), -1)\n","            # Apply mask to predictions and targets\n","            masked_output = output * mask\n","            masked_y_batch = y_batch * mask\n","            val_pred.append((masked_output).flatten().cpu().numpy())\n","            val_true.append((masked_y_batch).flatten().cpu().numpy())\n","\n","        val_pred = np.concatenate(val_pred, axis=0)\n","        val_true = np.concatenate(val_true, axis=0)\n","        assert val_pred.shape == val_true.shape, f\"Shape mismatch: val_pred {val_pred.shape} vs val_true {val_true.shape}\"\n","\n","        MSE = mse(val_true, val_pred)\n","\n","    return MSE"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"fB0tFHgQG8rS"},"outputs":[{"name":"stderr","output_type":"stream","text":["[I 2024-08-11 08:33:16,547] A new study created in memory with name: no-name-32a81d4f-12bb-44d5-9f6e-a701efc0aa94\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:33:24,083] Trial 0 finished with value: 161.07041931152344 and parameters: {'hidden_layer_size': 28, 'num_layers': 3, 'dropout': 0.23031522864102508, 'lr': 0.0012726350200074168}. Best is trial 0 with value: 161.07041931152344.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:33:33,297] Trial 1 finished with value: 161.08102416992188 and parameters: {'hidden_layer_size': 69, 'num_layers': 4, 'dropout': 0.5620038297649065, 'lr': 2.65078634304431e-05}. Best is trial 0 with value: 161.07041931152344.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:33:46,550] Trial 2 finished with value: 161.35406494140625 and parameters: {'hidden_layer_size': 107, 'num_layers': 3, 'dropout': 0.16819843432833512, 'lr': 0.03391566536366324}. Best is trial 0 with value: 161.07041931152344.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:33:54,522] Trial 3 finished with value: 160.6937255859375 and parameters: {'hidden_layer_size': 60, 'num_layers': 5, 'dropout': 0.5239693492348751, 'lr': 0.0006074973529310906}. Best is trial 3 with value: 160.6937255859375.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:34:20,905] Trial 4 finished with value: 160.8710174560547 and parameters: {'hidden_layer_size': 77, 'num_layers': 2, 'dropout': 0.25966609740673774, 'lr': 0.07622716721566945}. Best is trial 3 with value: 160.6937255859375.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:34:29,136] Trial 5 finished with value: 160.18423461914062 and parameters: {'hidden_layer_size': 102, 'num_layers': 2, 'dropout': 0.4784919268034612, 'lr': 0.0009278971877701564}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:34:33,014] Trial 6 finished with value: 161.2792510986328 and parameters: {'hidden_layer_size': 40, 'num_layers': 2, 'dropout': 0.589792602930334, 'lr': 0.0004292623326165573}. Best is trial 5 with value: 160.18423461914062.\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:83: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.1966627917446742 and num_layers=1\n","  warnings.warn(\"dropout option adds dropout after all but last \"\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:34:38,298] Trial 7 finished with value: 160.92002868652344 and parameters: {'hidden_layer_size': 62, 'num_layers': 1, 'dropout': 0.1966627917446742, 'lr': 0.0001458608848511515}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:34:49,175] Trial 8 finished with value: 160.7902069091797 and parameters: {'hidden_layer_size': 84, 'num_layers': 5, 'dropout': 0.5264725491623128, 'lr': 0.001595150711609862}. Best is trial 5 with value: 160.18423461914062.\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:83: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.4072564531959961 and num_layers=1\n","  warnings.warn(\"dropout option adds dropout after all but last \"\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:34:55,501] Trial 9 finished with value: 160.82534790039062 and parameters: {'hidden_layer_size': 120, 'num_layers': 1, 'dropout': 0.4072564531959961, 'lr': 0.00017510217753949404}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:35:02,425] Trial 10 finished with value: 161.13467407226562 and parameters: {'hidden_layer_size': 99, 'num_layers': 2, 'dropout': 0.4067680938596958, 'lr': 0.008437800715670966}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:35:09,692] Trial 11 finished with value: 161.22201538085938 and parameters: {'hidden_layer_size': 51, 'num_layers': 4, 'dropout': 0.47846868547531674, 'lr': 0.006834790557393356}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:35:22,273] Trial 12 finished with value: 160.5679931640625 and parameters: {'hidden_layer_size': 93, 'num_layers': 5, 'dropout': 0.46204941790863435, 'lr': 1.2447335204720934e-05}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:35:33,770] Trial 13 finished with value: 161.03033447265625 and parameters: {'hidden_layer_size': 95, 'num_layers': 4, 'dropout': 0.3238727590920223, 'lr': 1.1899103343838216e-05}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:35:42,157] Trial 14 finished with value: 160.81478881835938 and parameters: {'hidden_layer_size': 124, 'num_layers': 2, 'dropout': 0.4355442350424662, 'lr': 4.692125153043081e-05}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:35:57,201] Trial 15 finished with value: 161.20620727539062 and parameters: {'hidden_layer_size': 108, 'num_layers': 5, 'dropout': 0.10473062135769612, 'lr': 8.263443791016269e-05}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:36:05,142] Trial 16 finished with value: 160.49148559570312 and parameters: {'hidden_layer_size': 88, 'num_layers': 3, 'dropout': 0.3354268300621648, 'lr': 0.004545538855405198}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:36:13,516] Trial 17 finished with value: 161.31524658203125 and parameters: {'hidden_layer_size': 83, 'num_layers': 3, 'dropout': 0.32599790067143847, 'lr': 0.0044026401201989335}. Best is trial 5 with value: 160.18423461914062.\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:83: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.3653058524918975 and num_layers=1\n","  warnings.warn(\"dropout option adds dropout after all but last \"\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:36:18,887] Trial 18 finished with value: 160.6995086669922 and parameters: {'hidden_layer_size': 113, 'num_layers': 1, 'dropout': 0.3653058524918975, 'lr': 0.01882099579688276}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:36:25,373] Trial 19 finished with value: 161.3390655517578 and parameters: {'hidden_layer_size': 88, 'num_layers': 2, 'dropout': 0.268669253427982, 'lr': 0.002544675976819084}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:36:36,813] Trial 20 finished with value: 161.02259826660156 and parameters: {'hidden_layer_size': 128, 'num_layers': 3, 'dropout': 0.3759561117049577, 'lr': 0.0003934139688783875}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:36:45,247] Trial 21 finished with value: 160.59347534179688 and parameters: {'hidden_layer_size': 96, 'num_layers': 3, 'dropout': 0.46829161430184163, 'lr': 1.062721360022243e-05}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:36:57,097] Trial 22 finished with value: 160.4913787841797 and parameters: {'hidden_layer_size': 101, 'num_layers': 4, 'dropout': 0.4774230869771441, 'lr': 0.02103444198589406}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:37:08,395] Trial 23 finished with value: 161.5223846435547 and parameters: {'hidden_layer_size': 104, 'num_layers': 4, 'dropout': 0.5155231650403638, 'lr': 0.018084957698432363}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:37:21,510] Trial 24 finished with value: 161.2453155517578 and parameters: {'hidden_layer_size': 114, 'num_layers': 4, 'dropout': 0.30589341035515255, 'lr': 0.0035958232893228987}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:37:54,508] Trial 25 finished with value: 161.2446746826172 and parameters: {'hidden_layer_size': 75, 'num_layers': 3, 'dropout': 0.4168257960232491, 'lr': 0.09329562370580849}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:38:01,486] Trial 26 finished with value: 161.5823974609375 and parameters: {'hidden_layer_size': 87, 'num_layers': 2, 'dropout': 0.3739323119036812, 'lr': 0.013409601126243164}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:38:15,517] Trial 27 finished with value: 160.76992797851562 and parameters: {'hidden_layer_size': 116, 'num_layers': 4, 'dropout': 0.49402348619416897, 'lr': 0.038739693263534214}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:38:25,865] Trial 28 finished with value: 160.99615478515625 and parameters: {'hidden_layer_size': 103, 'num_layers': 3, 'dropout': 0.4469806247114783, 'lr': 0.002024264097011403}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:38:29,585] Trial 29 finished with value: 160.50794982910156 and parameters: {'hidden_layer_size': 16, 'num_layers': 3, 'dropout': 0.27436690364183974, 'lr': 0.0010317485591116566}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:38:34,877] Trial 30 finished with value: 160.96424865722656 and parameters: {'hidden_layer_size': 70, 'num_layers': 2, 'dropout': 0.5888157018398773, 'lr': 0.006735036057024356}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:38:41,663] Trial 31 finished with value: 160.74534606933594 and parameters: {'hidden_layer_size': 54, 'num_layers': 3, 'dropout': 0.2787664228284052, 'lr': 0.0010220839897216176}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:38:46,436] Trial 32 finished with value: 161.00021362304688 and parameters: {'hidden_layer_size': 21, 'num_layers': 4, 'dropout': 0.22950504271201227, 'lr': 0.0009898454145430623}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:38:52,451] Trial 33 finished with value: 160.61083984375 and parameters: {'hidden_layer_size': 38, 'num_layers': 3, 'dropout': 0.5564648147965243, 'lr': 0.00023289231230011438}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:38:57,481] Trial 34 finished with value: 160.6493377685547 and parameters: {'hidden_layer_size': 40, 'num_layers': 4, 'dropout': 0.3395328437355589, 'lr': 0.0007271351484639508}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:06,082] Trial 35 finished with value: 160.97926330566406 and parameters: {'hidden_layer_size': 79, 'num_layers': 3, 'dropout': 0.2952965716738849, 'lr': 0.042971990225651624}. Best is trial 5 with value: 160.18423461914062.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:10,578] Trial 36 finished with value: 159.87796020507812 and parameters: {'hidden_layer_size': 31, 'num_layers': 2, 'dropout': 0.21145061437043297, 'lr': 0.00427146487466474}. Best is trial 36 with value: 159.87796020507812.\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:83: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.16738955679032716 and num_layers=1\n","  warnings.warn(\"dropout option adds dropout after all but last \"\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:14,185] Trial 37 finished with value: 161.06898498535156 and parameters: {'hidden_layer_size': 32, 'num_layers': 1, 'dropout': 0.16738955679032716, 'lr': 0.0031238318707240936}. Best is trial 36 with value: 159.87796020507812.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:20,099] Trial 38 finished with value: 160.20462036132812 and parameters: {'hidden_layer_size': 60, 'num_layers': 2, 'dropout': 0.1017768487342534, 'lr': 0.01134860069000397}. Best is trial 36 with value: 159.87796020507812.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:25,180] Trial 39 finished with value: 160.5870819091797 and parameters: {'hidden_layer_size': 64, 'num_layers': 2, 'dropout': 0.14302294243850974, 'lr': 0.010894661991664976}. Best is trial 36 with value: 159.87796020507812.\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:83: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.10419330274682016 and num_layers=1\n","  warnings.warn(\"dropout option adds dropout after all but last \"\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:29,427] Trial 40 finished with value: 160.1719512939453 and parameters: {'hidden_layer_size': 48, 'num_layers': 1, 'dropout': 0.10419330274682016, 'lr': 0.02595145796036761}. Best is trial 36 with value: 159.87796020507812.\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:83: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.10576518524989956 and num_layers=1\n","  warnings.warn(\"dropout option adds dropout after all but last \"\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:34,249] Trial 41 finished with value: 161.35772705078125 and parameters: {'hidden_layer_size': 54, 'num_layers': 1, 'dropout': 0.10576518524989956, 'lr': 0.02726589146999595}. Best is trial 36 with value: 159.87796020507812.\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:83: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.1402207738619882 and num_layers=1\n","  warnings.warn(\"dropout option adds dropout after all but last \"\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:38,355] Trial 42 finished with value: 161.29824829101562 and parameters: {'hidden_layer_size': 47, 'num_layers': 1, 'dropout': 0.1402207738619882, 'lr': 0.047909710102898975}. Best is trial 36 with value: 159.87796020507812.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:43,566] Trial 43 finished with value: 160.60995483398438 and parameters: {'hidden_layer_size': 45, 'num_layers': 2, 'dropout': 0.22534101264910522, 'lr': 0.026392042353736985}. Best is trial 36 with value: 159.87796020507812.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:47,738] Trial 44 finished with value: 160.81077575683594 and parameters: {'hidden_layer_size': 28, 'num_layers': 2, 'dropout': 0.19872800534670415, 'lr': 0.056733474442798235}. Best is trial 36 with value: 159.87796020507812.\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:83: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.13839287620655896 and num_layers=1\n","  warnings.warn(\"dropout option adds dropout after all but last \"\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:51,676] Trial 45 finished with value: 160.61456298828125 and parameters: {'hidden_layer_size': 65, 'num_layers': 1, 'dropout': 0.13839287620655896, 'lr': 0.015839818393448543}. Best is trial 36 with value: 159.87796020507812.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:39:56,973] Trial 46 finished with value: 161.190673828125 and parameters: {'hidden_layer_size': 59, 'num_layers': 2, 'dropout': 0.18916590834794905, 'lr': 0.0072203878446312035}. Best is trial 36 with value: 159.87796020507812.\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:83: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.12102897191972674 and num_layers=1\n","  warnings.warn(\"dropout option adds dropout after all but last \"\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:40:00,840] Trial 47 finished with value: 160.98834228515625 and parameters: {'hidden_layer_size': 32, 'num_layers': 1, 'dropout': 0.12102897191972674, 'lr': 0.024459519892589064}. Best is trial 36 with value: 159.87796020507812.\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:40:05,677] Trial 48 finished with value: 161.19198608398438 and parameters: {'hidden_layer_size': 59, 'num_layers': 2, 'dropout': 0.16535461851296523, 'lr': 0.00919980035841005}. Best is trial 36 with value: 159.87796020507812.\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:83: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.5388064940319472 and num_layers=1\n","  warnings.warn(\"dropout option adds dropout after all but last \"\n","\u003cipython-input-15-9ec80db55b1c\u003e:15: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n","  optimizer = optim.Adam(model.parameters(), lr=trial.suggest_loguniform('lr', 1e-5, 1e-1))\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 20, 64, 64])) that is different to the input size (torch.Size([64, 20, 64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([8, 20, 8, 8])) that is different to the input size (torch.Size([8, 20, 8, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","[I 2024-08-11 08:40:09,956] Trial 49 finished with value: 160.46823120117188 and parameters: {'hidden_layer_size': 45, 'num_layers': 1, 'dropout': 0.5388064940319472, 'lr': 0.0015308819744076808}. Best is trial 36 with value: 159.87796020507812.\n"]},{"name":"stdout","output_type":"stream","text":["Best hyperparameters:  {'hidden_layer_size': 31, 'num_layers': 2, 'dropout': 0.21145061437043297, 'lr': 0.00427146487466474}\n","Best MSE:  159.87796020507812\n"]}],"source":["#optimerizer study carried out with help of chatgpt\n","\n","study = optuna.create_study(direction='minimize')\n","study.optimize(objective, n_trials=50)\n","\n","print(\"Best hyperparameters: \", study.best_params)\n","print(\"Best MSE: \", study.best_value)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0UqyMflBLfuy"},"outputs":[],"source":["# baseline LSTM code\n","\n","def run_epoch(dataloader, is_training=False):\n","    epoch_loss = 0\n","\n","    if is_training:\n","        model.train()\n","    else:\n","        model.eval()\n","\n","    for idx, (x, y, mask) in enumerate(dataloader):\n","        if is_training:\n","            optimizer.zero_grad()\n","\n","        batchsize = x.shape[0]\n","\n","        x = x.to(config[\"training\"][\"device\"])\n","        y = y.to(config[\"training\"][\"device\"])\n","        mask = mask.to(config[\"training\"][\"device\"])\n","        out = model(x, mask)\n","\n","        mask = mask.unsqueeze(-1)\n","\n","        loss = criterion(out.contiguous() * mask.contiguous(), y.contiguous() * mask.contiguous())\n","\n","        if is_training:\n","            loss.backward()\n","            optimizer.step()\n","\n","        epoch_loss += (loss.detach().item() / batchsize)\n","\n","    lr = scheduler.get_last_lr()[0]\n","\n","    return epoch_loss, lr\n","\n","train_dataloader = DataLoader(dataset_train, batch_size=config[\"training\"][\"batch_size\"], shuffle=True)\n","val_dataloader = DataLoader(dataset_val, batch_size=config[\"training\"][\"batch_size\"], shuffle=True)\n","\n","model = LSTMModel(input_size=config[\"model\"][\"input_size\"], hidden_layer_size=config[\"model\"][\"lstm_size\"], num_layers=config[\"model\"][\"num_lstm_layers\"], output_size=1, dropout=config[\"model\"][\"dropout\"])\n","model = model.to(config[\"training\"][\"device\"])\n","\n","criterion = nn.MSELoss()\n","optimizer = optim.Adam(model.parameters(), lr=config[\"training\"][\"learning_rate\"], betas=(0.9, 0.98), eps=1e-9)\n","scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=config[\"training\"][\"scheduler_step_size\"], gamma=0.1)\n","\n","for epoch in range(config[\"training\"][\"num_epoch\"]):\n","    loss_train, lr_train = run_epoch(train_dataloader, is_training=True)\n","    loss_val, lr_val = run_epoch(val_dataloader)\n","    scheduler.step()\n","\n","    print('Epoch[{}/{}] | loss train:{:.6f}, val test:{:.6f} | lr:{:.6f}'\n","              .format(epoch+1, config[\"training\"][\"num_epoch\"], loss_train, loss_val, lr_train))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sfOhw2Y8L1Tp"},"outputs":[],"source":["# baseline LSTM code\n","# here we re-initialize dataloader so the data doesn't shuffled, so we can plot the values by date\n","\n","train_dataloader = DataLoader(dataset_train, batch_size=config[\"training\"][\"batch_size\"], shuffle=False)\n","val_dataloader = DataLoader(dataset_val, batch_size=config[\"training\"][\"batch_size\"], shuffle=False)\n","\n","model.eval()\n","\n","# predict on the training data, to see how well the model managed to learn and memorize\n","\n","predicted_train = []\n","\n","for idx, (x, y, mask) in enumerate(train_dataloader):\n","    x = x.to(config[\"training\"][\"device\"])\n","    out = model(x)\n","    out = out.cpu().detach().numpy()\n","    if len(out.shape) \u003e 1:\n","      out = out.reshape(out.shape[0], 1)\n","    predicted_train.append(out)\n","\n","predicted_train = np.concatenate(predicted_train, axis=0)\n","predicted_train = predicted_train.reshape(predicted_train.shape[0])\n","\n","# predict on the validation data, to see how the model does\n","\n","predicted_val = []\n","\n","for idx, (x, y, mask) in enumerate(val_dataloader):\n","    x = x.to(config[\"training\"][\"device\"])\n","    out = model(x)\n","    out = out.cpu().detach().numpy()\n","    if len(out.shape) \u003e 1:\n","      out = out.reshape(out.shape[0], 1)\n","    predicted_val.append(out)\n","\n","predicted_val = np.concatenate(predicted_val, axis=0)\n","predicted_val = predicted_val.reshape(predicted_val.shape[0])\n","\n","# prepare data for plotting\n","# combine ARIMA and LSTM predictions\n","\n","##\n","# Fix , ARIMA and LSTM+ARIMA output the same., issue with hybrid below most likley\n","##\n","\n","hybrid_train_pred = scaler_arima.inverse_transform(arima_train_pred) + scaler.inverse_transform(predicted_train)\n","hybrid_val_pred = scaler_arima.inverse_transform(arima_val_pred) + scaler.inverse_transform(predicted_val)\n","\n","to_plot_data_y_train_pred = np.zeros(num_data_points)\n","to_plot_data_y_val_pred = np.zeros(num_data_points)\n","\n","to_plot_data_y_train_pred[config['data']['window_size']:split_index+config['data']['window_size']] = hybrid_train_pred\n","to_plot_data_y_val_pred[split_index+config['data']['window_size']:] = hybrid_val_pred\n","\n","to_plot_data_y_train_pred = np.where(to_plot_data_y_train_pred == 0, None, to_plot_data_y_train_pred)\n","to_plot_data_y_val_pred = np.where(to_plot_data_y_val_pred == 0, None, to_plot_data_y_val_pred)\n","\n","# plots\n","\n","fig = figure(figsize=(25, 5), dpi=80)\n","fig.patch.set_facecolor((1.0, 1.0, 1.0))\n","plt.plot(data_date, data_close_price, label=\"Actual prices\", color=config[\"plots\"][\"color_actual\"])\n","plt.plot(data_date, to_plot_data_y_train_pred, label=\"Predicted prices (train)\", color=config[\"plots\"][\"color_pred_train\"])\n","plt.plot(data_date, to_plot_data_y_val_pred, label=\"Predicted prices (validation)\", color=config[\"plots\"][\"color_pred_val\"])\n","plt.title(\"Compare predicted prices to actual prices\")\n","# code below edited for yfinance implementation\n","xtick_indices = [i for i in range(num_data_points) if (i % config[\"plots\"][\"xticks_interval\"] == 0 and (num_data_points - i) \u003e config[\"plots\"][\"xticks_interval\"]) or i == num_data_points - 1]\n","xticks_dates = [data_date[i] for i in xtick_indices]\n","xticks_labels = [str(d)[:-9] for d in xticks_dates]\n","plt.xticks(xticks_dates, xticks_labels, rotation='vertical')\n","plt.grid(visible=None, which='major', axis='y', linestyle='--')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wa6dwsJXMUij"},"outputs":[],"source":["# baseline LSTM code\n","\n","# prepare data for plotting the zoomed in view of the predicted prices (on validation set) vs. actual prices\n","\n","to_plot_data_y_val_subset = scaler_arima.inverse_transform(data_y_val)\n","to_plot_predicted_val = hybrid_val_pred\n","to_plot_data_date = data_date[split_index+config[\"data\"][\"window_size\"]:]\n","\n","# plots\n","\n","fig = figure(figsize=(25, 5), dpi=80)\n","fig.patch.set_facecolor((1.0, 1.0, 1.0))\n","plt.plot(to_plot_data_date, to_plot_data_y_val_subset, label=\"Actual prices\", color=config[\"plots\"][\"color_actual\"])\n","plt.plot(to_plot_data_date, to_plot_predicted_val, label=\"Predicted prices (validation)\", color=config[\"plots\"][\"color_pred_val\"])\n","plt.title(\"Zoom in to examine predicted price on validation data portion\")\n","# code below edited for yfinance implementation\n","start_index = int(num_data_points * config['data']['train_split_size'])\n","xtick_indices = [i for i in range(start_index, num_data_points) if (i % (config[\"plots\"][\"xticks_interval\"]/5) == 0 and (num_data_points - i) \u003e config[\"plots\"][\"xticks_interval\"]/6)]\n","xtick_indices.append(num_data_points - 1)  # Ensure the last point is included\n","xticks_dates = [data_date[i] for i in xtick_indices]\n","xticks_labels = [str(d)[:-9] for d in xticks_dates]\n","plt.xticks(xticks_dates, xticks_labels, rotation='vertical')\n","plt.grid(visible=None, which='major', axis='y', linestyle='--')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Fg8RLPE-MvtZ"},"outputs":[],"source":["# baseline LSTM code\n","\n","# predict the closing price of the next trading day\n","\n","model.eval()\n","\n","x = torch.tensor(data_x_unseen).float().to(config[\"training\"][\"device\"]).unsqueeze(0).unsqueeze(2) # this is the data type and shape required, [batch, sequence, feature]\n","\n","prediction = model(x)\n","prediction = prediction.cpu().detach().numpy()\n","\n","# prepare plots\n","\n","plot_range = 20\n","to_plot_data_y_val = np.zeros(plot_range)\n","to_plot_data_y_val_pred = np.zeros(plot_range)\n","to_plot_data_y_test_pred = np.zeros(plot_range)\n","\n","to_plot_data_y_val[:plot_range-1] = scaler_arima.inverse_transform(data_y_val)[-plot_range+1:]\n","to_plot_data_y_val_pred[:plot_range-1] = hybrid_val_pred[-plot_range+1:]\n","\n","prediction = scaler_arima.inverse_transform(arima_val_pred[-1]) + prediction\n","predicted_value = prediction.flatten()[0]\n","\n","to_plot_data_y_test_pred[plot_range-1] = predicted_value\n","\n","to_plot_data_y_val = np.where(to_plot_data_y_val == 0, None, to_plot_data_y_val)\n","to_plot_data_y_val_pred = np.where(to_plot_data_y_val_pred == 0, None, to_plot_data_y_val_pred)\n","to_plot_data_y_test_pred = np.where(to_plot_data_y_test_pred == 0, None, to_plot_data_y_test_pred)\n","\n","# plot\n","\n","plot_date_test = data_date[-plot_range+1:]\n","plot_date_test = [str(d)[:-9] for d in plot_date_test]\n","plot_date_test.append(\"tomorrow\")\n","fig = figure(figsize=(25, 5), dpi=80)\n","fig.patch.set_facecolor((1.0, 1.0, 1.0))\n","# code below edited for yfinance implementation\n","plt.plot(plot_date_test, to_plot_data_y_val, label=\"Actual prices\", marker=\".\", markersize=10, color=config[\"plots\"][\"color_actual\"])\n","plt.plot(plot_date_test, to_plot_data_y_val_pred, label=\"Past predicted prices\", marker=\".\", markersize=10, color=config[\"plots\"][\"color_pred_val\"])\n","plt.plot(plot_date_test, to_plot_data_y_test_pred, label=\"Predicted price for next day\", marker=\".\", markersize=20, color=config[\"plots\"][\"color_pred_test\"])\n","plt.title(\"Predicted close price of the next trading day\")\n","plt.grid(visible=None, which='major', axis='y', linestyle='--')\n","plt.legend()\n","\n","plt.show()\n","\n","print(\"Predicted close price of the next trading day:\", round(to_plot_data_y_test_pred[plot_range-1], 2))"]}],"metadata":{"colab":{"name":"","provenance":[{"file_id":"1bPMbSGaZPtYo4Rfst_wIgeXCJvP_WsJy","timestamp":1723085231630}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}